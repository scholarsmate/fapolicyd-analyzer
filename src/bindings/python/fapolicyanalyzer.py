# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _fapolicyanalyzer
else:
    import _fapolicyanalyzer

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


NOT_FOUND = _fapolicyanalyzer.NOT_FOUND
RANGE_ERROR = _fapolicyanalyzer.RANGE_ERROR
PARSE_ERROR = _fapolicyanalyzer.PARSE_ERROR
ALLOCATION_ERROR = _fapolicyanalyzer.ALLOCATION_ERROR
OK = _fapolicyanalyzer.OK

def field_array_initialize(field_array_ptr, num_fields):
    return _fapolicyanalyzer.field_array_initialize(field_array_ptr, num_fields)

def field_array_construct():
    return _fapolicyanalyzer.field_array_construct()

def field_array_destroy(field_array_ptr):
    return _fapolicyanalyzer.field_array_destroy(field_array_ptr)

def field_array_set_key(field_array_ptr, field_number, key):
    return _fapolicyanalyzer.field_array_set_key(field_array_ptr, field_number, key)

def field_array_set_value(field_array_ptr, field_number, value):
    return _fapolicyanalyzer.field_array_set_value(field_array_ptr, field_number, value)

def field_array_get_num_fields(field_array_ptr):
    return _fapolicyanalyzer.field_array_get_num_fields(field_array_ptr)

def field_array_get_key(field_array_ptr, field_number):
    return _fapolicyanalyzer.field_array_get_key(field_array_ptr, field_number)

def field_array_get_value(field_array_ptr, field_number):
    return _fapolicyanalyzer.field_array_get_value(field_array_ptr, field_number)
class field_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    key = property(_fapolicyanalyzer.field_t_key_get, _fapolicyanalyzer.field_t_key_set)
    value = property(_fapolicyanalyzer.field_t_value_get, _fapolicyanalyzer.field_t_value_set)

    def __init__(self):
        _fapolicyanalyzer.field_t_swiginit(self, _fapolicyanalyzer.new_field_t())
    __swig_destroy__ = _fapolicyanalyzer.delete_field_t

# Register field_t in _fapolicyanalyzer:
_fapolicyanalyzer.field_t_swigregister(field_t)


def field_array_get_field(field_array_ptr, field_ptr, field_number):
    return _fapolicyanalyzer.field_array_get_field(field_array_ptr, field_ptr, field_number)

def match_filename(pattern, string):
    return _fapolicyanalyzer.match_filename(pattern, string)

def construct_parse_context():
    return _fapolicyanalyzer.construct_parse_context()

def destroy_parse_context(parse_ctx_ptr):
    return _fapolicyanalyzer.destroy_parse_context(parse_ctx_ptr)

def imbue_parser(parse_ctx_ptr, line):
    return _fapolicyanalyzer.imbue_parser(parse_ctx_ptr, line)

def parse(parse_ctx_ptr, line):
    return _fapolicyanalyzer.parse(parse_ctx_ptr, line)

def get_number_of_subject_fields(parse_ctx_ptr):
    return _fapolicyanalyzer.get_number_of_subject_fields(parse_ctx_ptr)

def get_number_of_object_fields(parse_ctx_ptr):
    return _fapolicyanalyzer.get_number_of_object_fields(parse_ctx_ptr)

def get_subject_field(parse_ctx_ptr, field_ptr, field_number):
    return _fapolicyanalyzer.get_subject_field(parse_ctx_ptr, field_ptr, field_number)

def get_object_field(parse_ctx_ptr, field_ptr, field_number):
    return _fapolicyanalyzer.get_object_field(parse_ctx_ptr, field_ptr, field_number)

def is_audit_record(line):
    return _fapolicyanalyzer.is_audit_record(line)

def package_get_rpm_info():
    return _fapolicyanalyzer.package_get_rpm_info()

def package_get_rpm_files_info(rpm_table_ptr, progress_callback, progress_client_ptr):
    return _fapolicyanalyzer.package_get_rpm_files_info(rpm_table_ptr, progress_callback, progress_client_ptr)

def package_hash_files(rpm_files_info_table_ptr, progress_callback, progress_client_ptr):
    return _fapolicyanalyzer.package_hash_files(rpm_files_info_table_ptr, progress_callback, progress_client_ptr)
SHA256_DIGEST_SIZE = _fapolicyanalyzer.SHA256_DIGEST_SIZE

def sha256_create():
    return _fapolicyanalyzer.sha256_create()

def sha256_destroy(ctx):
    return _fapolicyanalyzer.sha256_destroy(ctx)

def sha256_update(ctx, data, len):
    return _fapolicyanalyzer.sha256_update(ctx, data, len)

def sha256_final(ctx, digest):
    return _fapolicyanalyzer.sha256_final(ctx, digest)

def sha256_file(hash_buf, hash_buf_len, path):
    return _fapolicyanalyzer.sha256_file(hash_buf, hash_buf_len, path)

def table_construct():
    return _fapolicyanalyzer.table_construct()

def table_destroy(table_ptr):
    return _fapolicyanalyzer.table_destroy(table_ptr)

def table_initialize(table_ptr, column_names, column_count):
    return _fapolicyanalyzer.table_initialize(table_ptr, column_names, column_count)

def table_get_column_count(table_ptr):
    return _fapolicyanalyzer.table_get_column_count(table_ptr)

def table_get_row_count(table_ptr):
    return _fapolicyanalyzer.table_get_row_count(table_ptr)

def table_get_column_name(table_ptr, col_num):
    return _fapolicyanalyzer.table_get_column_name(table_ptr, col_num)

def table_find_column_number(table_ptr, col_name, col_num_ptr):
    return _fapolicyanalyzer.table_find_column_number(table_ptr, col_name, col_num_ptr)

def table_get_value(table_ptr, col_num, row_num):
    return _fapolicyanalyzer.table_get_value(table_ptr, col_num, row_num)

def table_append_row(table_ptr, row):
    return _fapolicyanalyzer.table_append_row(table_ptr, row)

def table_append_column(table_ptr, column_name, column):
    return _fapolicyanalyzer.table_append_column(table_ptr, column_name, column)

def table_index_create(table_ptr, col_num):
    return _fapolicyanalyzer.table_index_create(table_ptr, col_num)

def table_index_destroy(table_index_ptr):
    return _fapolicyanalyzer.table_index_destroy(table_index_ptr)

def table_index_count(table_index_ptr):
    return _fapolicyanalyzer.table_index_count(table_index_ptr)

def table_index_find(table_index_ptr, key):
    return _fapolicyanalyzer.table_index_find(table_index_ptr, key)

def row_index_next(row_index_ptr, index_p):
    return _fapolicyanalyzer.row_index_next(row_index_ptr, index_p)


